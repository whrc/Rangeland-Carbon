// Import datasets
var SoilGrid_SOC = ee.Image("projects/soilgrids-isric/soc_mean"),
    SoilGrid_SOCS = ee.Image("projects/soilgrids-isric/ocs_mean"),
    SoilGrid_clay = ee.Image("projects/soilgrids-isric/clay_mean"),
    SoilGrid_silt = ee.Image("projects/soilgrids-isric/silt_mean"),
    SoilGrid_BD = ee.Image("projects/soilgrids-isric/bdod_mean"),
    DAYMET = ee.ImageCollection("NASA/ORNL/DAYMET_V4"),
    SRTM = ee.Image("USGS/SRTMGL1_003"),
    flowaccum = ee.Image("WWF/HydroSHEDS/15ACC"),
    dem = ee.Image("WWF/HydroSHEDS/03VFDEM"),
    RAP = ee.ImageCollection("projects/rangeland-analysis-platform/vegetation-cover-v2"),
    MODISTree = ee.ImageCollection("MODIS/006/MOD44B"),
    MODISGPP = ee.ImageCollection("MODIS/006/MOD17A2H"),
    MODISEVI = ee.ImageCollection("MODIS/006/MOD13Q1"),
    LandsatEVI = ee.ImageCollection("LANDSAT/LC08/C01/T1_8DAY_EVI"),
    NLCD = ee.Image("users/username/nlcd_2019"),
    bd1 = ee.Image("users/username/SoilGrid100/bd1"),
    bd2 = ee.Image("users/username/SoilGrid100/bd2"),
    bd3 = ee.Image("users/username/SoilGrid100/bd3"),
    bd4 = ee.Image("users/username/SoilGrid100/bd4"),
    bd5 = ee.Image("users/username/SoilGrid100/bd5"),
    bd6 = ee.Image("users/username/SoilGrid100/bd6"),
    bd7 = ee.Image("users/username/SoilGrid100/bd7"),
    clay1 = ee.Image("users/username/SoilGrid100/clay1"),
    clay2 = ee.Image("users/username/SoilGrid100/clay2"),
    clay3 = ee.Image("users/username/SoilGrid100/clay3"),
    clay4 = ee.Image("users/username/SoilGrid100/clay4"),
    clay5 = ee.Image("users/username/SoilGrid100/clay5"),
    clay6 = ee.Image("users/username/SoilGrid100/clay6"),
    clay7 = ee.Image("users/username/SoilGrid100/clay7"),
    sand1 = ee.Image("users/username/SoilGrid100/sand1"),
    sand2 = ee.Image("users/username/SoilGrid100/sand2"),
    sand3 = ee.Image("users/username/SoilGrid100/sand3"),
    sand4 = ee.Image("users/username/SoilGrid100/sand4"),
    sand5 = ee.Image("users/username/SoilGrid100/sand5"),
    sand6 = ee.Image("users/username/SoilGrid100/sand6"),
    sand7 = ee.Image("users/username/SoilGrid100/sand7"),
    soc1 = ee.Image("users/username/SoilGrid100/soc1"),
    soc2 = ee.Image("users/username/SoilGrid100/soc2"),
    soc3 = ee.Image("users/username/SoilGrid100/soc3"),
    soc4 = ee.Image("users/username/SoilGrid100/soc4"),
    soc5 = ee.Image("users/username/SoilGrid100/soc5"),
    soc6 = ee.Image("users/username/SoilGrid100/soc6"),
    soc7 = ee.Image("users/username/SoilGrid100/soc7"),
    site_name = ee.FeatureCollection("projects/project-folder-name/assets/Shapefiles/site_name"); // Specify site name

// Get weather data
var ppt = DAYMET.filter(ee.Filter.date('2019-01-01', '2019-12-31')).select("prcp").sum();
var airT = (DAYMET.filter(ee.Filter.date('2019-01-01', '2019-12-31')).select("tmin").sum()
  .add(DAYMET.filter(ee.Filter.date('2019-01-01', '2019-12-31')).select("tmax").sum())).divide(730)
  .rename('airT');
var vpd = DAYMET.filter(ee.Filter.date('2019-01-01', '2019-12-31')).select("vp").sum().divide(365);
// Get long term weather data
var ppt20 = DAYMET.filter(ee.Filter.date('2001-01-01', '2020-12-31')).select("prcp").sum().rename('ppt20');
var tmin20 = DAYMET.filter(ee.Filter.date('2001-01-01', '2020-12-31')).select("tmin").sum().divide(365).rename('tmin20');
var tmax20 = DAYMET.filter(ee.Filter.date('2001-01-01', '2020-12-31')).select("tmax").sum().divide(365).rename('tmax20');
var vpd20 = DAYMET.filter(ee.Filter.date('2001-01-01', '2020-12-31')).select("vp").sum().divide(365).rename('VPD20');

// Terrain calculations from SRTM
var elevation = SRTM.select('elevation');
var slope = ee.Terrain.slope(elevation);
var aspect = ee.Terrain.aspect(elevation);
var twi = (flowaccum.multiply(ee.Image(flowaccum.projection().nominalScale())
            .divide(slope.multiply(ee.Image(Math.PI)).divide(ee.Image(180)).tan()))).log().rename('twi');
var twicoarse = twi.clip(site_name).reduceNeighborhood(ee.Reducer.mean(),ee.Kernel.square(5),"kernel",false,null).rename('TWI')
var TWI = twi.unmask(twicoarse) // gap-fill spatial data
            
// Get RAP land cover percentages
var RAP2019 = RAP.filter(ee.Filter.equals('year', 2019));
// Get RAP land cover percentages from long-term records
/*
var RAP_coll = RAP.filter(ee.Filter.date('2001-01-01', '2020-12-31')).select(["AFGC","PFGC","TREE","SHR","LTR","BG"]);
var RAP_AFGC_a = RAP_coll.select("AFGC").mean();
var RAP_PFGC_a = RAP_coll.select("PFGC").mean();
var RAP_TREE_a = RAP_coll.select("TREE").mean();
var RAP_SHR_a = RAP_coll.select("SHR").mean();
var RAP_LTR_a = RAP_coll.select("LTR").mean();
var RAP_BG_a = RAP_coll.select("BG").mean();
var RAP_cov = ee.Image.cat(RAP_AFGC_a,RAP_PFGC_a,RAP_TREE_a,RAP_SHR_a,RAP_LTR_a,RAP_BG_a)
.set('system:time_start', ee.Date('2019-01-01').millis());
*/

// Get tree cover
var Tree = MODISTree.filter(ee.Filter.date('2019-01-01', '2019-12-31')).select("Percent_Tree_Cover").toBands().rename("tree");
// Get tree cover from long-term records
var Tree20 = MODISTree.filter(ee.Filter.date('2001-01-01', '2020-12-31')).select("Percent_Tree_Cover").mean().rename("Tree20");

// Get GPP
var GPP = MODISGPP.filter(ee.Filter.date('2019-01-01', '2019-12-31')).select('Gpp').sum().divide(10);
//long-term GPP
var GPP20 = MODISGPP.filter(ee.Filter.date('2001-01-01', '2020-12-31')).select('Gpp').sum().divide(10).divide(20).rename("GPP20");

// Get EVI
var EVI = LandsatEVI
    .filter(ee.Filter.calendarRange(2013, 2019, 'year'))
    .filter(ee.Filter.calendarRange(4, 10, 'month')).select('EVI').mean();
// Get EVI from long term records
var EVI8 = LandsatEVI
    .filter(ee.Filter.calendarRange(2014, 2021, 'year'))
    .filter(ee.Filter.calendarRange(4, 10, 'month')).select('EVI').mean().rename("EVI8");

// Change unit for reported BD
var bd1 = bd1.divide(1000)
var bd2 = bd2.divide(1000)
var bd3 = bd3.divide(1000)
var bd4 = bd4.divide(1000)
var bd5 = bd5.divide(1000)
   
// Get soil bands
var soil = ee.Image.cat(bd1,bd2,bd3,bd4,bd5,bd6,bd7,
clay1,clay2,clay3,clay4,clay5,clay6,clay7,
sand1,sand2,sand3,sand4,sand5,sand6,sand7,
soc1,soc2,soc3,soc4,soc5,soc6,soc7)
.rename(['bd1','bd2','bd3','bd4','bd5',
'clay1','clay2','clay3','clay4','clay5','
'sand1','sand2','sand3','sand4','sand5',
'soc1','soc2','soc3','soc4','soc5'])
.set('system:time_start', ee.Date('2019-01-01').millis());// set the pseudo date to avoid error in export

// Get v1 covariates
var covariates = ee.Image.cat(
  elevation,slope,aspect,TWI,
  ppt,airT,vpd,soil,
  NLCD,Tree,GPP,EVI)
.set('system:time_start', ee.Date('2019-01-01').millis());
var covCol = ee.ImageCollection([covariates]);

// Get v2 covariates (mostly long-term records) that are not included in previous versions
var covariates_V2 = ee.Image.cat(
  ppt20,tmin20,tmax20,vpd20,Tree20,GPP20,EVI8,RAP_2019
  ).set('system:time_start', ee.Date('2019-01-01').millis()); //RAP_cov 
var covCol_V2 = ee.ImageCollection([covariates_V2]);

// Functions for point buffer and zonal statistics
function bufferPoints(radius, bounds) {
  return function(pt) {
    pt = ee.Feature(pt);
    return bounds ? pt.buffer(radius).bounds() : pt.buffer(radius);
  };
}
function zonalStats(ic, fc, params) {
  var _params = {
    reducer: ee.Reducer.mean(),
    scale: null,
    crs: null,
    bands: null,
    bandsRename: null,
    imgProps: null,
    imgPropsRename: null,
    datetimeName: 'datetime',
    datetimeFormat: 'YYYY-MM-dd HH:mm:ss'
  };
  if (params) {
    for (var param in params) {
      _params[param] = params[param] || _params[param];
    }
  }
  var imgRep = ic.first();
  var nonSystemImgProps = ee.Feature(null)
    .copyProperties(imgRep).propertyNames();
  if (!_params.bands) _params.bands = imgRep.bandNames();
  if (!_params.bandsRename) _params.bandsRename = _params.bands;
  if (!_params.imgProps) _params.imgProps = nonSystemImgProps;
  if (!_params.imgPropsRename) _params.imgPropsRename = _params.imgProps;
  var results = ic.map(function(img) {
    img = ee.Image(img.select(_params.bands, _params.bandsRename))
      .set(_params.datetimeName, img.date().format(_params.datetimeFormat))
      .set('timestamp', img.get('system:time_start'));
    var propsFrom = ee.List(_params.imgProps)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var propsTo = ee.List(_params.imgPropsRename)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var imgProps = img.toDictionary(propsFrom).rename(propsFrom, propsTo);
    var fcSub = fc.filterBounds(img.geometry());
    return img.reduceRegions({
      collection: fcSub,
      reducer: _params.reducer,
      scale: _params.scale,
      crs: _params.crs
    })
    .map(function(f) {
      return f.set(imgProps);
    });
  }).flatten().filter(ee.Filter.notNull(_params.bandsRename));
  return results;
}

// Create buffers for the site shapefile uploaded to GEE
var sitebuffer = site_name.map(bufferPoints(30, false)); // Specify site name

// Extract and export V1 covariates 
var paramscov = {
  scale: 30,
  crs: 'EPSG:4326',
  reducer: ee.Reducer.median(),
  bands: ['elevation', 'slope', 'aspect', 'TWI', 'prcp', 'airT', 'vp', 'b1', 'tree', 'Gpp', 'EVI',
  'soc1','soc2','soc3','soc4','soc5','clay1','clay2','clay3','clay4','clay5',
  'sand1','sand2','sand3','sand4','sand5','bd1','bd2','bd3','bd4','bd5'],
  bandsRename: ['EL', 'SL', 'AS', 'TWI', 'ppt', 'T', 'VPD', 'LULC', 'Tree', 'GPP', 'EVI','SOC1','SOC2','SOC3','SOC4','SOC5',
  'clay1','clay2','clay3','clay4','clay5','sand1','sand2','sand3','sand4','sand5','BD1','BD2','BD3','BD4','BD5']
};
var sitecov = zonalStats(covCol, sitebuffer, paramscov);
Export.table.toDrive({
  collection: sitecov,
  fileFormat: 'CSV',
  });

// Extract and export V2 long-term covariates
var paramscov_V2 = {
  scale: 30,
  crs: 'EPSG:4326',
  reducer: ee.Reducer.median(),
  bands: ['ppt20', 'tmin20', 'tmax20', 'VPD20', 'Tree20', 'GPP20', 'EVI8', 'AFGC', 'BG', 'LTR', 'PFGC', 'SHR', 'TREE']
};
var sitecov_V2 = zonalStats(covCol_V2, sitebuffer, paramscov_V2);
Export.table.toDrive({
  collection: sitecov_V2,
  fileFormat: 'CSV',
  });