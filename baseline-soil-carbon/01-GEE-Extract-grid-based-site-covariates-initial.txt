// Import datasets
var site_names = ee.FeatureCollection("projects/project-folder-name/assets/Shapefiles/site_name"), // Specify site name
    om_0_5 = ee.Image("users/username/POLARIS/om/om_0_5"),
    om_5_15 = ee.Image("users/username/POLARIS/om/om_5_15"),
    clay_0_5 = ee.Image("users/username/POLARIS/clay/clay_0_5"),
    clay_5_15 = ee.Image("users/username/POLARIS/clay/clay_5_15"),
    clay_30_60 = ee.Image("users/username/POLARIS/clay/clay_30_60"),
    soilgrid_clay5 = ee.Image("users/username/soilgrids_clay_M_sl2_100m"),
    soilgrid_clay60 = ee.Image("users/username/soilgrids_clay_M_sl5_100m"),
    soilgrid_soc5 = ee.Image("users/username/soilgrids_soc_M_sl2_100m");

// Select ranches
var site1 = sites.filter(ee.Filter.eq("Name","site1-name"))
var site2 = sites.filter(ee.Filter.eq("Name","site2-name"))

// Obtain preprocessed SRTM data and derive topographic features
var srtm = require("users/username/srtm-Data")
var elevation = srtm.getLayer(site_names,"Elevation")
var twi = srtm.getLayer(site_names, "twi")
var aspect = srtm.getLayer(site_names, "Aspect")
var slope = srtm.getLayer(site_names, "Slope")

//Calculate NDVI
var ndvi = ee.ImageCollection('LANDSAT/LC08/C01/T1_32DAY_NDVI') 
var years = ee.List.sequence(2014,2020) // Customize the years here
var byYearAvg = ee.ImageCollection.fromImages(
      years.map(function (y) {
        return ndvi.filter(ee.Filter.calendarRange(y, y, 'year'))
                    .mean()
                    .set('year', y);
}));
var ndvi = byYearAvg.mean();

// Obtain POLARIS soil data
var om = om_0_5.add(om_5_15).rename("om_0_15");
var clay_0_15 = clay_0_5.add(clay_5_15).rename("clay_0_15");
clay_30_60 = clay_30_60.rename("clay_30_60");

// Obtain SoilGrid data
soilgrid_soc5 = soilgrid_soc5.rename("soilgrid_soc5");
soilgrid_clay5 = soilgrid_clay5.rename("soilgrid_clay5");
soilgrid_clay60 = soilgrid_clay60.rename("soilgrid_clay60");

// Combine images (bands)
var all = ee.Image(elevation).addBands([twi,aspect,slope,ndvi,om,clay_0_15,clay_30_60,soilgrid_soc5,soilgrid_clay5,soilgrid_clay60])
all = all.set("system:time_start",946684800000)
all = ee.ImageCollection([all])

// Generate random points
var points = ee.FeatureCollection.randomPoints(site1,10000,0); // Select number of grids

// Functions for point buffer and zonal statistics
function zonalStats(ic, fc, params) {
  var _params = {
    reducer: ee.Reducer.mean(),
    scale: null,
    crs: null,
    bands: null,
    bandsRename: null,
    imgProps: null,
    imgPropsRename: null,
    datetimeName: 'datetime',
    datetimeFormat: 'YYYY-MM-dd HH:MM:ss'
  };
  if (params) {
    for (var param in params) {
      _params[param] = params[param] || _params[param];
    }
  }
  var imgRep = ic.first();
  var nonSystemImgProps = ee.Feature(null)
    .copyProperties(imgRep).propertyNames();
  if (!_params.bands) _params.bands = imgRep.bandNames();
  if (!_params.bandsRename) _params.bandsRename = _params.bands;
  if (!_params.imgProps) _params.imgProps = nonSystemImgProps;
  if (!_params.imgPropsRename) _params.imgPropsRename = _params.imgProps;
  var results = ic.map(function(img) {
    img = ee.Image(img.select(_params.bands, _params.bandsRename))
      .set(_params.datetimeName, img.date().format(_params.datetimeFormat))
      .set('timestamp', img.get('system:time_start'));
    var propsFrom = ee.List(_params.imgProps)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var propsTo = ee.List(_params.imgPropsRename)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var imgProps = img.toDictionary(propsFrom).rename(propsFrom, propsTo);
    var fcSub = fc.filterBounds(img.geometry());
    return img.reduceRegions({
      collection: fcSub,
      reducer: _params.reducer,
      scale: _params.scale,
      crs: _params.crs
    })
    .map(function(f) {
      return f.set(imgProps);
    });
  }).flatten().filter(ee.Filter.notNull(_params.bandsRename));
  return results;
}

// Calculate zonal stats
var stats = zonalStats(all, points,{})
stats = stats.select(['elevation','twi','aspect','slope','NDVI','soilgrid_soc5', 'soilgrid_clay5', 'soilgrid_clay60']) 

// Export covariates
Export.table.toDrive({
  collection: stats,
  description:'site1_10000',
  fileFormat: 'CSV'
});
// Export Points to shapefile
Export.table.toDrive({
  collection: points,
  description:'site1_10000_shp',
  fileFormat: 'SHP'
});

