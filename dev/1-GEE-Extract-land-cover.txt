var RAP = ee.ImageCollection("projects/rangeland-analysis-platform/vegetation-cover-v2"),
    RAP2 = ee.ImageCollection("projects/rangeland-analysis-platform/vegetation-cover-v3"),
    ptsAll = ee.FeatureCollection("users/username/filename"),//Ameriflux and NEON sites 
    nlcd = ee.ImageCollection("USGS/NLCD_RELEASES/2016_REL"),
    nlcd2019 = ee.Image("users/username/nlcd_2019"),
    cdl = ee.ImageCollection("USDA/NASS/CDL");

//Optional visualization of site locations
Map.addLayer(ptsAll,{'color': 'red'},
             'Geometry [black]: point');

//Get 2020 RAP, 2019 CDL, and 2016 NLCD data as an example, but alternative years can be used
var RAP2020 = RAP2.filter(ee.Filter.equals('year', 2020));
var CDL2019 = cdl.filter(ee.Filter.date('2019-01-01', '2019-12-31')).first();
var cdlcover = CDL2019.select('cropland'); 
var NLCD2016 = nlcd.filter(ee.Filter.eq('system:index', '2016')).first();
var nlcdcover = NLCD2016.select('landcover');

//Create buffers
function bufferPoints(radius, bounds) {
  return function(pt) {
    pt = ee.Feature(pt);
    return bounds ? pt.buffer(radius).bounds() : pt.buffer(radius);
  };
}

//Functions for zonal stats
function zonalStats(ic, fc, params) {
  var _params = {
    reducer: ee.Reducer.mean(),
    scale: null,
    crs: null,
    bands: null,
    bandsRename: null,
    imgProps: null,
    imgPropsRename: null,
    datetimeName: 'datetime',
    datetimeFormat: 'YYYY-MM-dd HH:mm:ss'
  };
  if (params) {
    for (var param in params) {
      _params[param] = params[param] || _params[param];
    }
  }
  var imgRep = ic.first();
  var nonSystemImgProps = ee.Feature(null)
    .copyProperties(imgRep).propertyNames();
  if (!_params.bands) _params.bands = imgRep.bandNames();
  if (!_params.bandsRename) _params.bandsRename = _params.bands;
  if (!_params.imgProps) _params.imgProps = nonSystemImgProps;
  if (!_params.imgPropsRename) _params.imgPropsRename = _params.imgProps;
  var results = ic.map(function(img) {
    img = ee.Image(img.select(_params.bands, _params.bandsRename))
      .set(_params.datetimeName, img.date().format(_params.datetimeFormat))
      .set('timestamp', img.get('system:time_start'));
    var propsFrom = ee.List(_params.imgProps)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var propsTo = ee.List(_params.imgPropsRename)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var imgProps = img.toDictionary(propsFrom).rename(propsFrom, propsTo);
    var fcSub = fc.filterBounds(img.geometry());
    return img.reduceRegions({
      collection: fcSub,
      reducer: _params.reducer,
      scale: _params.scale,
      crs: _params.crs
    }).map(function(f) {
      return f.set(imgProps);
    });
  }).flatten().filter(ee.Filter.notNull(_params.bandsRename));
  return results;
}

//Create buffers for the site coordinates
var ptsbuffer = ptsAll.map(bufferPoints(30, false));

//Carry out zonal analysis
var params = {
  reducer: ee.Reducer.median(),
  //bands: ['AFGC', 'BG', 'LTR', 'PFGC','SHR','TREE'] //Different names depending on RAP versions
  bands: ['AFG', 'BGR', 'LTR', 'PFG','SHR','TRE']
};
var ptsTopoStats = zonalStats(RAP2020, ptsbuffer, params);
print(ptsTopoStats);
var frequency = nlcdcover.reduceRegions({
  collection: ptsbuffer,
  reducer:ee.Reducer.frequencyHistogram(),
  scale:30
});
print(frequency);             
var frequency2 = cdlcover.reduceRegions({
  collection: ptsbuffer3,
  reducer:ee.Reducer.frequencyHistogram(),
  scale:30
});
print(frequency2);





var ptsbuffer = pts.map(bufferPoints(30, false));
print(ptsbuffer)
